import { Command } from "commander";
import chalk from "chalk";
import fs from "fs-extra";
import path from "path";
import inquirer from "inquirer";

export function initCommand() {
  const command = new Command("init");

  command
    .argument("<projectName>", "Name of the new project")
    .description("Initialize a new Nyiks project")
    .action(async (projectName) => {
      const projectPath = path.join(process.cwd(), projectName);

      if (await fs.pathExists(projectPath)) {
        console.log(
          chalk.red(
            `‚ùå Project "${projectName}" already exists at ${projectPath}.`
          )
        );
        process.exit(1);
      }

      await fs.mkdirp(path.join(projectPath, "contracts"));

      console.log(chalk.green(`üìÅ Created project directory: ${projectPath}`));
      console.log(chalk.blue(`üìÇ Created contracts directory inside.`));

      // Prompt for default contract type
      const { contractType } = await inquirer.prompt([
        {
          type: "list",
          name: "contractType",
          message:
            "What type of smart contract would you like to generate first?",
          choices: [
            { name: "Fungible Token (SIP-010)", value: "ft" },
            { name: "Non-Fungible Token (SIP-009)", value: "nft" },
            { name: "DAO Contract", value: "dao" },
            { name: "None (I'll decide later)", value: "none" },
          ],
        },
      ]);

      const readmePath = path.join(projectPath, "README.md");

      const base = `# ${projectName}

    This project was initialized using the **Nyiks CLI**.

    ## Getting Started

    After generating the project with:

    \`\`\`bash
    nyiks init ${projectName}
    \`\`\`

    Navigate into your project directory:

    \`\`\`bash
    cd ${projectName}
    \`\`\`
    `;

      let contractInstructions = "";

      if (contractType === "ft") {
        contractInstructions = `Then generate your SIP-010 smart contract:

    \`\`\`bash
    nyiks generate --name "Fungible Token" --type "ft" --max-supply 1000000 --symbol "FT"
    \`\`\``;
      } else if (contractType === "nft") {
        contractInstructions = `Then generate your SIP-009 smart contract:

    \`\`\`bash
    nyiks generate --name "MyNFT" --type "nft" --symbol "MNFT" --network testnet
    \`\`\``;
      } else {
        contractInstructions = `You can generate your first smart contract with:

    üëâ For Fungible Token:
    \`\`\`bash
    nyiks generate --name "Fungible Token" --type "ft" --max-supply 1000000 --symbol "FT"
    \`\`\`

    üëâ For Non-Fungible Token:
    \`\`\`bash
    nyiks generate --name "MyNFT" --type "nft" --symbol "MNFT" --network testnet
    \`\`\`

    üëâ For DAO:
    \`\`\`bash
    nyiks generate --name "MyDAO" --type "dao"  --symbol "MDAO" --network testnet
    \`\`\``;
      }

      const footer = `

    ---

    Smart contracts generated by **Nyiks CLI**.`;

      await fs.writeFile(readmePath, base + contractInstructions + footer);

      console.log(chalk.yellow("üìñ Added README.md"));
    });

  return command;
}
